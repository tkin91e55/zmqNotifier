[tool.poetry]
name = "zmqNotifier"
version = "0.1.0"
description = "ZeroMQ-based financial data receiver and notification system"
authors = ["tkin91e55 <tkingkwun@gmail.com>"]
readme = "README.md"
packages = [{ include = "zmqNotifier", from="src" }]
package-mode = true
license = "MIT"

[tool.poetry.dependencies]
python = "~3.11"
python-dotenv = "^1.0.1"
pydantic = "^2.11.0"
pydantic-settings = "^2.11.0"
cachetools = "^6.2.1"
httpx = "^0.28.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
ruff = "^0.5.5"
pylint = "^3.2.5"
pre-commit = "^4.3.0"
pydocstringformatter = "^0.7.2"
sphinx = "^7.3.7"
pytest = "~8.0"
coverage = "^7.6.0"
tox = "^4.15.0"
ipython = "^9.0.2"
zmq = "^0.0.0"
pyzmq = "^27.1.0"
pandas = "^2.3.2"
pytest-asyncio = ">=0.23,<1.0"
watchdog = "^6.0.0"

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
pretty = true
show_error_codes = true
namespace_packages = true
plugins = ["pydantic.mypy"]

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py311"
src = ["src", "tests"]
exclude = [
    "src/zmqNotifier/DWX_ZeroMQ_Connector_v2_0_1_RC8.py"
]

[tool.ruff.lint]
select = [
  "F",      # Pyflakes - basic Python errors
  "E",      # pycodestyle errors - PEP 8 violations
  "W",      # pycodestyle warnings - PEP 8 style issues
  "C90",    # mccabe - complexity checking
  "I",      # isort - import sorting
  "N",      # pep8-naming - naming conventions
  "UP",     # pyupgrade - upgrade syntax for newer Python
  "YTT",    # flake8-2020 - misuse of sys.version checks
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",  # flake8-async - async/await best practices
  "S",      # flake8-bandit - security testing
  "BLE",    # flake8-blind-except - catch specific exceptions
  "FBT",    # flake8-boolean-trap - avoid boolean function arguments
  "B",      # flake8-bugbear - likely bugs and design problems
  "A",      # flake8-builtins - avoid shadowing builtins
  "C4",     # flake8-comprehensions - better list/dict comprehensions
  "DTZ",    # flake8-datetimez - datetime timezone awareness
  "T10",    # flake8-debugger - no debugger statements
  "DJ",     # flake8-django - Django best practices
  "EM",     # flake8-errmsg - error message best practices
  "EXE",    # flake8-executable - shebang presence/absence
  "FA",     # flake8-future-annotations - future annotations usage
  "ICN",    # flake8-import-conventions - import naming conventions
  "G",      # flake8-logging-format - logging format strings
  'INP',    # flake8-no-pep420 - require __init__.py
  'PIE',    # flake8-pie - miscellaneous lints
  "T20",    # flake8-print - no print statements
  'PYI',    # flake8-pyi - type stub files
  'PT',     # flake8-pytest-style - pytest best practices
  "Q",      # flake8-quotes - consistent quote usage
  "RSE",    # flake8-raise - raise statement improvements
  "RET",    # flake8-return - return statement improvements
  "SLF",    # flake8-self - private member access
  "SLOT",   # flake8-slots - __slots__ usage
  "SIM",    # flake8-simplify - code simplification suggestions
  "TID",    # flake8-tidy-imports - import organization
  "TCH",    # flake8-type-checking - type checking import blocks
  "INT",    # flake8-gettext - internationalization
  # "ARG", # flake8-unused-arguments - unused function arguments
  "PTH",    # flake8-use-pathlib - prefer pathlib over os.path
  # "ERA",    # eradicate - commented-out code
  "PD",     # pandas-vet - pandas best practices
  "PGH",    # pygrep-hooks - misc regexp-based checks
  "PL",     # Pylint - comprehensive code quality checks
  "TRY",    # tryceratops - exception handling best practices
  "FLY",    # flynt - convert string formatting to f-strings
  # "NPY",  # NumPy-specific rules
  # "AIR",  # Airflow-specific rules
  "PERF",   # Perflint - performance anti-patterns
  # "FURB", # refurb - modernization suggestions
  # "LOG",  # flake8-logging - logging best practices
  "RUF"     # Ruff-specific rules
]
extend-select = [
  "D",      # pydocstyle - docstring conventions
  "B",      # flake8-bugbear (extended)
  "C4",     # flake8-comprehensions (extended)
  "I",      # isort (extended)
  "N",      # pep8-naming (extended)
  "S",      # flake8-bandit (extended)
  "W",      # pycodestyle warnings (extended)
  "TID252"  # Banned imports
]
ignore = [
  "S101",   # Allow assert statements (needed for tests)
  "D105",   # Missing docstring in magic method
  "D107",   # Missing docstring in __init__
  "D203",   # 1 blank line required before class docstring (conflicts with D211)
  "D212",   # Multi-line docstring summary should start at first line (conflicts with D213)
  "E402",   # Module level import not at top of file
  "D100",   # Missing docstring in public module (not critical)
  "D102",   # Missing docstring in public method (acceptable for simple methods)
  "D103",   # Missing docstring in public function (acceptable for simple functions)
  "PLW0603", # Global statement usage (acceptable for logging setup)
  "PLR2004", # Magic value comparison (acceptable for numeric thresholds)
  "RUF012",  # Mutable class attributes (acceptable without ClassVar in this context)
  "C901",    # Complex structure (acceptable for data parsing logic)
  "BLE001",  # Blind except (acceptable with proper logging)
  "SIM102",  # Collapsible if (sometimes clearer when separate)
  "N999"     # Invalid module name (third-party file naming)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true # disable make list linewise
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
"src/zmqNotifier/DWX_ZeroMQ_Connector_v2_0_1_RC8.py" = ["ALL"]
"tests/**/test_*.py" = ["D103","D101","SLF001", "PTH118", "D401", "DTZ005",
                        "INP001", "PT004" , "PTH100", "PTH120", "D205", "D400", "D415" ]

[tool.pylint.main]
py-version = "3.11"
load-plugins = ["pylint.extensions.docparams"]

[tool.pylint.messages_control]
disable = [
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
]

[tool.pytest.ini_options]
addopts = "-ra --strict-markers"
testpaths = ["tests"]
markers = [
    "asyncio: mark test as async",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.pydocstringformatter]
style = "pep257" # or 'numpydoc', need plugin if using 'google'
write = true

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"
