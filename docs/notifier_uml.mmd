classDiagram
   class VolatilityNotifier {
       -config: dict
       -_symbol_trackers: dict[str, SymbolTracker]
       +__init__()
       +on_tick(symbol: str, tick: TickData)
       +update_config(config)
   }

   class SymbolTracker {
       -_symbol: str
       -_master: VolatilityNotifier
       -_aggregators: dict[str, BucketedSlidingAggregator]
       +__init__(symbol: str, master: VolatilityNotifier)
       +on_tick(tick: TickData)
       +add_agg(tf: str)
       +remove_agg(tf: str)
       -_calculate()
   }

   class Scores {
       +symbol: str
       +timeframe: str
       +volatility_score: int
       +activity_score: int
       +direction: str
       +pip_change: int
       +volume: int
       +mangnitude() int
   }
   class NotificationManager {
       -_telegram: TelegramNotifier
       -_message_queue: PriorityQueue[Scores]
       -_batch_interval: timedelta
       +__init__()
       +enqueue(score: Scores)
       -_flush()
       -_format_batch_summary()
   }



   class BucketedSlidingAggregator {
       -_bucket_span: timedelta
       -_max_window: int
       -_buckets: deque[Bucket]
       -_active_window: SlidingWindowMinMax
       +add(timestamp: datetime, value: float)
       +query_min_max(num_buckets: int)
   }

   class TelegramNotifier {
       -_bot_token: str
       -_chat_id: str
       -_timeout: float
       +__init__(bot_token: str, chat_id: str)
       +send_message(message: str) bool
       +from_config(config) TelegramNotifier
   }

   class Configuration {
       +volatility_thresholds: dict[str, dict[str, float]]
       +activity_thresholds: dict[str, dict[str, float]]
       +cooldown_settings: dict[str, timedelta]
       +get_threshold(symbol: str, tf: str) tuple[float, float]
   }
   %% Relationships
   VolatilityNotifier "1" *-- "N" SymbolTracker : manages
   VolatilityNotifier "1" --> "1" Configuration : reads
   VolatilityNotifier "1" --> "1" NotificationManager : drives
   SymbolTracker "1" *-- "M" BucketedSlidingAggregator : contains
   SymbolTracker "1" --> "1" NotificationManager : sends alerts to
   NotificationManager "1" --> "1" TelegramNotifier : uses backend
   NotificationManager "1" *-- "N" Scores : queues
   Scores "1" --> "1" SymbolTracker : generated by

   %% Inheritance
   class NotifierBackend {
       <<abstract>>
       +send_message(message: str) bool
   }
   TelegramNotifier --|> NotifierBackend : implements
